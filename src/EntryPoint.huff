// TODO getNonce(address _sender, uint192 _key);
// TODO getUserOpHash(UserOperation calldata _op);
// TODO function handleOps(UserOperation[] calldata ops, address payable beneficiary);

// UserOp
//struct UserOperation {
//    address sender; UOO
//    uint256 nonce; UOO+0x20
//    bytes initCode; UOO+0x40
//    bytes callData; UOO+0x60
//    uint256 callGasLimit; UOO+0x80
//    uint256 verificationGasLimit; UOO+0xa0
//    uint256 preVerificationGas; UOO+0xc0
//    uint256 maxFeePerGas; UOO+0xe0
//    uint256 maxPriorityFeePerGas; UOO+0x100
//    bytes paymasterAndData; UOO+0x120
//    bytes signature; UOO+0x140
//}

// UserOpInfo = 15 * 32
//      address sender;
//      uint256 nonce;
//      bytes32 hashInitCode;
//      bytes32 hashCallData;
//      uint256 callGasLimit;
//      uint256 verificationGasLimit;
//      uint256 preVerificationGas;
//      uint256 maxFeePerGas;
//      uint256 maxPriorityFeePerGas;
//      bytes32 hashPaymasterAndData;
//      bytes32 userOpHash;
//      uint256 prefund;
//      uint256 contextOffset;
//      uint256 preOpGas;

// Memory Layout
// [0x00 ~ 0x20) : scratch space
// [0x20 ~ 0x40) : scratch space
// [0x40 ~ 0x60) : memory size
// [0x60 ~ 0x80) : zero slots ( The zero slot is used as initial value for dynamic memory arrays and should never be written to (the free memory pointer points to 0x80 initially). )
// [0x80 ~ 0xa0) : userOpSize
// [0xa0 ~ 0xc0) : currentUserOp
// after 0xc0, per every 15*32 is allocated for UserOpInfo ex. 0xc0 ~ 0x1e0 = UserOpInfo[0]
// TODO add function for copying calldata to memory
// HandleOps methods Id : 0x1fad948c

#define macro COPY_USEROP() = takes(1) returns(2){ // returns UMO
    // [UserOp_Offset]
    0x1e0
    0xa0 mload                // [currentUserOp, 0x1e0, UOO]
    mul                       // [currentUserOp * 0x1e0, UOO]
    0xc0 add                  // [0xc0 + currentUserOp * 0x1e0, UOO] 
    0x40 dup3                 // [UOO, 0x40, UMO, UOO]
    dup3                      // [UMO, UOO, 0x40, UMO, UOO]
    calldatacopy              // [UMO, UOO]
    0xa0 dup3                 // [UOO, 0xa0, UMO, UOO]
    0x80 add                  // [UOO+0x80, 0xa0, UMO, UOO]
    0x40                      // [0x40, UOO+0x80, 0xa0, UMO, UOO]
    dup4                      // [UMO, 0x40, UOO+0x80, 0xa0, UMO, UOO]
    add                       // [UMO + 0x40, UOO+0x80, 0xa0, UMO, UOO]
    calldatacopy              // [UMO, UOO]
    dup2 0x120 add            // [UOO + 0x120, UMO, UOO]
    calldataload              // [paymaster_Offset, UMO, UOO]
    dup3 add 0x20 add         // [UOO + paymaster_Offset + 0x20, UMO, UOO]
    calldataload              // [paymasterAddress, UMO, UOO]
    0x60 shr
    dup2 0xe0 add mstore      // [UMO, UOO]
}

#define macro VALIDATE_PREPAYMENT() = takes(2) returns(2) {
    // [UserOp_Calldata_Offset]
    gas                       // [gas]
    
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    0x1fad948c eq handle_ops jumpi  // jump to handleOps
    
    handle_ops:
      0x04 calldataload 0x04 add    // [userOps_offset]
      dup1                          // [userOps_offset, userOps_offset]
      calldataload                  // [userOps_length, userOps_offset]
      0x80 mstore                   // [userOps_offset]
      0x40 add                      // [userOp_0_offset]
    loop_verification_phase:
      0x80 mload                    // [opSize, userOp_i_offset]
      0xa0 mload                    // [current_i, opSize, userOp_i_offset]
      eq execution_phase jumpi      // [userOp_i_offset]  
      //COPY_USEROP()                 // [userOp_i_memory_offset, userOp_i_calldata_offset]
      VALIDATE_PREPAYMENT()
      0xa0 mload                    
      0x01 add 0xa0 mstore          // [] -- add 1 to current_i
    execution_phase:
      stop
}
